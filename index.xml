<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Introduction on Showcase Template</title><link>https://visualjcj.github.io/showcase/</link><description>Recent content in Introduction on Showcase Template</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://visualjcj.github.io/showcase/index.xml" rel="self" type="application/rss+xml"/><item><title>Creating a New Theme</title><link>https://visualjcj.github.io/showcase/posts/creating-a-new-theme/</link><pubDate>Sun, 28 Sep 2014 00:00:00 +0000</pubDate><guid>https://visualjcj.github.io/showcase/posts/creating-a-new-theme/</guid><description>Introduction # This tutorial will show you how to create a simple theme in Hugo. I assume that you are familiar with HTML, the bash command line, and that you are comfortable using Markdown to format content. I&amp;rsquo;ll explain how Hugo uses templates and how you can organize your templates to create a theme. I won&amp;rsquo;t cover using CSS to style your theme.
We&amp;rsquo;ll start with creating a new site with a very basic template.</description></item><item><title>Migrate to Hugo from Jekyll</title><link>https://visualjcj.github.io/showcase/posts/migrate-from-jekyll/</link><pubDate>Mon, 10 Mar 2014 00:00:00 +0000</pubDate><guid>https://visualjcj.github.io/showcase/posts/migrate-from-jekyll/</guid><description>Move static content to static # Jekyll has a rule that any directory not starting with _ will be copied as-is to the _site output. Hugo keeps all static content under static. You should therefore move it all there. With Jekyll, something that looked like
▾ &amp;lt;root&amp;gt;/ ▾ images/ logo.png should become
▾ &amp;lt;root&amp;gt;/ ▾ static/ ▾ images/ logo.png Additionally, you&amp;rsquo;ll want any files that should reside at the root (such as CNAME) to be moved to static.</description></item><item><title>(Hu)go Template Primer</title><link>https://visualjcj.github.io/showcase/posts/goisforlovers/</link><pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate><guid>https://visualjcj.github.io/showcase/posts/goisforlovers/</guid><description>Hugo uses the excellent Go html/template library for its template engine. It is an extremely lightweight engine that provides a very small amount of logic. In our experience that it is just the right amount of logic to be able to create a good static website. If you have used other template systems from different languages or frameworks you will find a lot of similarities in Go templates.
This document is a brief primer on using Go templates.</description></item><item><title>Getting Started with Hugo</title><link>https://visualjcj.github.io/showcase/posts/hugoisforlovers/</link><pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate><guid>https://visualjcj.github.io/showcase/posts/hugoisforlovers/</guid><description>Step 1. Install Hugo # Go to Hugo releases and download the appropriate version for your OS and architecture.
Save it somewhere specific as we will be using it in the next step.
More complete instructions are available at Install Hugo
Step 2. Build the Docs # Hugo has its own example site which happens to also be the documentation site you are reading right now.
Follow the following steps:</description></item><item><title/><link>https://visualjcj.github.io/showcase/docs/3EntregaCesar/background/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://visualjcj.github.io/showcase/docs/3EntregaCesar/background/</guid><description> Background #</description></item><item><title/><link>https://visualjcj.github.io/showcase/docs/3EntregaCesar/conclusiones/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://visualjcj.github.io/showcase/docs/3EntregaCesar/conclusiones/</guid><description> Conclusiones # Proyecciones futuras #</description></item><item><title/><link>https://visualjcj.github.io/showcase/docs/3EntregaCesar/problema/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://visualjcj.github.io/showcase/docs/3EntregaCesar/problema/</guid><description> Problema #</description></item><item><title/><link>https://visualjcj.github.io/showcase/docs/3EntregaCesar/solucion/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://visualjcj.github.io/showcase/docs/3EntregaCesar/solucion/</guid><description> Solucion #</description></item><item><title/><link>https://visualjcj.github.io/showcase/docs/3EntregaJohan/background/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://visualjcj.github.io/showcase/docs/3EntregaJohan/background/</guid><description> Background #</description></item><item><title/><link>https://visualjcj.github.io/showcase/docs/3EntregaJohan/conclusiones/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://visualjcj.github.io/showcase/docs/3EntregaJohan/conclusiones/</guid><description> Conclusiones # Proyecciones futuras #</description></item><item><title/><link>https://visualjcj.github.io/showcase/docs/3EntregaJohan/problema/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://visualjcj.github.io/showcase/docs/3EntregaJohan/problema/</guid><description> Problema #</description></item><item><title/><link>https://visualjcj.github.io/showcase/docs/3EntregaJohan/solucion/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://visualjcj.github.io/showcase/docs/3EntregaJohan/solucion/</guid><description> Solucion #</description></item><item><title/><link>https://visualjcj.github.io/showcase/docs/3EntregaJulio/background/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://visualjcj.github.io/showcase/docs/3EntregaJulio/background/</guid><description> Background #</description></item><item><title/><link>https://visualjcj.github.io/showcase/docs/3EntregaJulio/conclusiones/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://visualjcj.github.io/showcase/docs/3EntregaJulio/conclusiones/</guid><description> Conclusiones # Proyecciones futuras #</description></item><item><title/><link>https://visualjcj.github.io/showcase/docs/3EntregaJulio/problema/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://visualjcj.github.io/showcase/docs/3EntregaJulio/problema/</guid><description> Problema #</description></item><item><title/><link>https://visualjcj.github.io/showcase/docs/3EntregaJulio/solucion/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://visualjcj.github.io/showcase/docs/3EntregaJulio/solucion/</guid><description> Solucion #</description></item><item><title/><link>https://visualjcj.github.io/showcase/docs/informacion/members/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://visualjcj.github.io/showcase/docs/informacion/members/</guid><description>Members # Cesar Solano # Estudiante de ingeniera de sistemas, interesado en la visualización de funciones matemáticas, gráficos de transmisión, animaciones y modelado. También soy diseñador web fullstack.
Julio Quintero Peña # Soy Estudiante de la ingenieria de sistemas y computacion, me concideron una persona activa y dedicada, me gusta dar lo mejor de mi en cada proyecto en el que participo. Me apaciona la represesntación de fenemonos naturales a travez de la logica y la matematica, el desarrollo de software es un mundo muy amplio del cual estoy interesado explorar.</description></item><item><title/><link>https://visualjcj.github.io/showcase/docs/ProyectoEntrega2/background/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://visualjcj.github.io/showcase/docs/ProyectoEntrega2/background/</guid><description>Background # Coordenadas baricéntricas # Las coordenadas baricéntricas son coordenadas dentro de un triángulo o n-simplex (en varias dimensiones), estas coordenadas nos permiten parametrizar puntos dentro de un triángulo por lo que una coordenada baricéntrica en un triángulo equilátero en un punto P tendrá su compañero P’ en un triángulo rectángulo.
Uno de los usos de las coordenadas baricéntricas es el despliegue gráfico, en el cual se decide qué píxeles del dispositivo deben ser activados, para representar la primitiva (Rasterización), convertir un objeto continuo en coordenadas de mundo a un objeto discreto en el computador para su visualización.</description></item><item><title/><link>https://visualjcj.github.io/showcase/docs/ProyectoEntrega2/conclusiones/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://visualjcj.github.io/showcase/docs/ProyectoEntrega2/conclusiones/</guid><description>Conclusiones # las coordenadas baricéntricas son de gran utilidad para las artes visuales generadas por computador, fue muy interesante intentar entender todo lo que hay detrás de una función que se hace con un sencillo comando pero que a su vez puede ser tan complejo de implementar a bajo nivel. El raycasting ha sido una metolodogía que ha brindado muchas soluciones a problemas respecto a la renderización de objetos 3D en la computación visual.</description></item><item><title/><link>https://visualjcj.github.io/showcase/docs/ProyectoEntrega2/problema/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://visualjcj.github.io/showcase/docs/ProyectoEntrega2/problema/</guid><description>Problema # La librería de p5.js cuenta con una inmensa cantidad de herramientas para construir diferentes soluciones visuales, una que está implementada es la texturización de objetos, con un simple comando podemos texturizar de manera automática o podemos asignar diferentes coordenadas a vértices sin embargo implementar esta función es un buen ejercicio para observar como trabaja la texturización, es por eso que una parte de este proyecto será crear un pincel texturizador implementado con coordenadas baricéntricas.</description></item><item><title/><link>https://visualjcj.github.io/showcase/docs/ProyectoEntrega2/solucion/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://visualjcj.github.io/showcase/docs/ProyectoEntrega2/solucion/</guid><description>Solucion # Pincel texturizador con coordenadas baricentricas # El objetivo era:
crear un triángulo de referencia (TNT 🧨) y texturizarlo normalmente (default de P5). con la posición del mouse (Coordenadas del mouse - 200 siendo la mitad del canvas), calcular las coordenadas baricéntricas del triángulo de referencia. con esas coordenadas baricéntricas, miramos las coordenadas baricéntricas en un segundo triángulo (lienzo) y se calculan las respectivas coordenadas cartesianas en relación al triangulo lienzo (proceso inverso del cálculo baricéntrico).</description></item><item><title/><link>https://visualjcj.github.io/showcase/docs/ProyectosSynthwave/background/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://visualjcj.github.io/showcase/docs/ProyectosSynthwave/background/</guid><description>Background # Generacion de una terreno-ciudad para video Synthwave-Vaporwave # Synthwave # Es un género de música electrónica influenciando por películas📽️, videojuegos 🎮 y bandas sonoras 🎶 de la decada de 1980. Este género retro se impregna de la estética y nostalgia de la música new wave y synth pop de los ochenta, que al mismo tiempo busca caracterizar su estilo de una manera retrofuturista inspirado por las películas de ciencia ficción de la época como puede ser Blade Runner o Tron.</description></item><item><title/><link>https://visualjcj.github.io/showcase/docs/ProyectosSynthwave/conclusiones/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://visualjcj.github.io/showcase/docs/ProyectosSynthwave/conclusiones/</guid><description>Conclusiones # P5.js es una herramienta muy poderosa para generar herramientas graficas La introducción a la computación gráfica por medio de P5.js se hace mucho más dócil de afrontar y permite explorar nuevas ideas de una forma sencilla aprovechando todas las herramientas que nos puede brindar. La generación procedural en general es una herramienta muy necesaria para recrear la idea de perfección imperfecta de la naturaleza. El campo de visión es un factor importante a tener en cuenta a la hora de representar la visión de una persona en algún recurso gráfico, con ello, lograremos generar la experiencia que habíamos planeado.</description></item><item><title/><link>https://visualjcj.github.io/showcase/docs/ProyectosSynthwave/problema/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://visualjcj.github.io/showcase/docs/ProyectosSynthwave/problema/</guid><description>Problema # En los ultimos años se popularizo un género de la electronica conocido como Synthwave, en plataformas como Youtube surgieron recopilaciones de canciones con este género con un fondo similar a este:
Para realizar el video muchos canales usan animaciones generadas en programas como Blender, sin embargo Blender aunque es una herramienta muy potente no es la unica alternativa para realizar este tipo de videos, es por eso que se realizara un proyecto de generador de videos Synthwave.</description></item><item><title/><link>https://visualjcj.github.io/showcase/docs/ProyectosSynthwave/solucion/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://visualjcj.github.io/showcase/docs/ProyectosSynthwave/solucion/</guid><description>Solucion # Para este caso lo que empleamos fue un generador de terreno, ubicamos los elementos en imagen, texturizamos, usamos las siguientes herramientas:
camara y perspectiva: para generar un efecto de fov. translate y rotate: para ubicar los objetos en la escena. crete Shape: para generar el terreno. textura: para texturizar. vertex: para crear figuras 2D (terreno) carga de imagenes teoria del color: # Para la paleta de colores nos basamos en colores complementarios</description></item></channel></rss>