<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Showcase Template</title><link>https://visualjcj.github.io/showcase/docs/Texturing/</link><description>Recent content on Showcase Template</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://visualjcj.github.io/showcase/docs/Texturing/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://visualjcj.github.io/showcase/docs/Texturing/background/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://visualjcj.github.io/showcase/docs/Texturing/background/</guid><description>Background # OpenGL # OpenGL es una API que brinda un gran conjunto de funciones que podemos usar para manipular los gráficos en 2D y 3D y es mantenida por el grupo Khronos. Sus principales objetivos son el intentar reducir la complejidad de la interfaz con las diferentes tarjetas gráficas, teniendo una sola API que sea uniforme. De igual manera quieren brindar el total de sus funciones a diversas plataformas de hardware, ocultando sus diferencias.</description></item><item><title/><link>https://visualjcj.github.io/showcase/docs/Texturing/conclusiones/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://visualjcj.github.io/showcase/docs/Texturing/conclusiones/</guid><description>Conclusiones # Los modelos de color nos permiten trabajar de distinar maneras en ciertas situaciones específicas, como por ejemplo el modelo RGB es importante para cuando estemos trabajando en páginas web. El uso de modelos de color como el HSV nos permite entender de una forma distinta el cómo obtener los colores para que nuestros ojos piensen que estamos viendo uno específico, como por ejemplo la creación del marrón o del magenta.</description></item><item><title/><link>https://visualjcj.github.io/showcase/docs/Texturing/problema/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://visualjcj.github.io/showcase/docs/Texturing/problema/</guid><description>Problema # Se nos plantean 2 ejercicios, cada uno con dos problemas.
Ejercicio 1 # 1.1 Include the blue channel in the uv visualization (e.g., use blue with red or green channels. 1.2 Use other shapes different than the quad as screen filters. Ejercicio 2 # 2.1 Implement other coloring brightness tools such as HSV value V, HSL lightness L or Component average. 2.2 Implement texture tinting by mixing color and texel interpolated data.</description></item><item><title/><link>https://visualjcj.github.io/showcase/docs/Texturing/solucion/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://visualjcj.github.io/showcase/docs/Texturing/solucion/</guid><description>Solución # Ejercicio 1 # En este ejercicio es el básico para entrar a trabajar con shaders, tenemos una escena la cual a una circunferencia estamos coloreando respecto a sus coordenadas, en este caso podremos cambiar la forma en la que la texturizamos con diferentes canales, verde-rojo, verde-azul o rojo-azul.
Adicionalmente el problema venia con una quad como figura a texturizar, hemos modificado esta figura por una circunferencia.
Coloring a figure precision mediump float; varying vec2 texcoords2; varying vec4 color4; uniform float opacity; uniform int channelColor; float map(float value, float min1, float max1, float min2, float max2) { return min2 + (value - min1) * (max2 - min2) / (max1 - min1); } void main() { vec3 color = vec3(0.</description></item></channel></rss>